import {
  Box,
  Button,
  Container,
  FormControl,
  FormControlLabel,
  NativeSelect,
  Paper,
  Switch,
  TextField,
  Typography,
} from "@mui/material";
import Head from "next/head";
import * as React from "react";
import { useState } from "react";
import ConstituencyAutocomplete, {
  constituencyOption,
} from "@/components/ConstituencyAutocomplete";
import MemberAutocomplete, {
  createEmail,
  memberList,
} from "@/components/MemberAutocomplete";
import members from "../data/btw21_members.json" assert { type: "json" };
import constituencies from "../data/btw21_constituencies.json" assert { type: "json" };
import MemberCard from "@/components/MemberCard";
import Letter from "@/components/Letter";

export default function Home() {
  const [searchOption, setSearchOption] = useState<string>("");
  const [searchConstituency, setSearchConstituency] = useState<string>("");
  const [searchMember, setSearchMember] = useState<
    {
      id: number;
      name: string;
    }[]
  >([]);
  const [selectedMember, setSelectedMember] = useState<memberList[]>([]);
  const [afdFilter, setAfdFilter] = useState<boolean>(true);

  const handleSearchOption = (event: React.BaseSyntheticEvent) => {
    setSearchConstituency("");
    setSearchMember([]);
    setSelectedMember([]);
    setSearchOption(event.target.value);
  };

  const handleSearchValue = (value: any) => {
    if (searchOption === "member") {
      setSearchMember(value);
      setSelectedMember(memberDisplay);
    } else {
      setSearchConstituency(value);
      setSelectedMember([]);
    }
  };

  const handleMemberSelection = (member: memberList) => {
    const isMemberSelected = selectedMember.find(
      (item) => item.id === member.id
    );
    isMemberSelected
      ? setSelectedMember(
          selectedMember.filter((item) => item.id !== member.id)
        )
      : setSelectedMember([...selectedMember, member]);
  };

  const constituencyOptions: constituencyOption[] = constituencies.map(
    (constituency, index) => ({
      id: index,
      constituency_country_id: Number(constituency["Land"]),
      constituency_id: Number(constituency["Wahlkreis"]),
      constituency_name: constituency["Gemeinde Name"],
    })
  );

  const memberList: memberList[] = members.map((member, index) => ({
    id: index,
    name: member["Vornamen"] + " " + member["Nachname"],
    email: createEmail(member),
    constituency: {
      constituency_type: member["Gebietsart"],
      constituency_id: Number(member["Gebietsnummer"]),
      constituency_name: member["Gebietsname"],
    },
    party: member["Gruppenname"],
    party_long: member["GruppennameLang"],
    emoji:
      member["Gruppenname"] === ("CSU" || "CDU")
        ? "‚ö´Ô∏è"
        : member["Gruppenname"] === "SPD"
        ? "üî¥"
        : member["Gruppenname"] === "DIE LINKE"
        ? "üü£"
        : member["Gruppenname"] === "GR√úNE"
        ? "üü¢"
        : member["Gruppenname"] === "FDP"
        ? "üü°"
        : member["Gruppenname"] === "AfD"
        ? "üîµ"
        : "‚ö™Ô∏è",
  }));
  const memberDisplay: memberList[] =
    searchMember.length > 0
      ? searchMember.flatMap((member) =>
          memberList.filter((memberItem) => memberItem.id === member.id)
        )
      : [];

  const constituencyMainDisplay: memberList[] = memberList
    .filter(
      (member) =>
        member.constituency.constituency_id +
          " - " +
          member.constituency.constituency_name ===
        searchConstituency
    )
    .filter((member) => afdFilter === false || member.party !== "AfD");

  const constituencyAdditionalDisplay: memberList[] = memberList
    .filter(
      (member) =>
        member.constituency.constituency_type === "Land" &&
        member.constituency.constituency_id ===
          constituencyOptions.find(
            (constituency) =>
              constituency.constituency_id +
                " - " +
                constituency.constituency_name ===
              searchConstituency
          )?.constituency_country_id
    )
    .filter((member) => afdFilter === false || member.party !== "AfD");

  const mailAdresses: string = selectedMember
    .map((member) => member.email)
    .join(",");

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Container
        maxWidth={false}
        sx={{
          overflow: "auto",
          paddingRight: "0px !important",
          paddingLeft: "0px !important",
          maxWidth: "100%",
          width: "100vw",
          display: "flex",
          flexDirection: "column",
          gap: "10px",
          paddingTop: "50px",
          paddingBottom: "50px",
        }}>
        <Box
          sx={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            marginTop: "100px",
            marginBottom: "100px",
          }}>
          <Typography variant='h2' component='div' sx={{ textAlign: "center" }}>
            AFD Verbot jetzt?
          </Typography>
          <Typography variant='h3' component='div' sx={{ textAlign: "center" }}>
            Schreibe deine*n Abgeordnet*innen
          </Typography>
        </Box>
        <Box
          sx={{
            display: "flex",
            width: "100%",
            justifyContent: "space-evenly",
            margin: "auto",
          }}>
          <FormControl sx={{ textAlign: "center", minWidth: "60%" }}>
            <NativeSelect
              id='selectSearchOption'
              defaultValue='member'
              onChange={(event) => handleSearchOption(event)}>
              <option value={"member"}>Namen</option>
              <option value={"community"}>Gemeinde / Wahlkreis</option>
            </NativeSelect>
          </FormControl>
          <FormControlLabel
            control={<Switch onChange={() => setAfdFilter(!afdFilter)} />}
            label='mit AFD'
          />
        </Box>
        <Box sx={{ margin: "auto", width: "80vw" }}>
          {searchOption === "community" ? (
            <ConstituencyAutocomplete handleSearchValue={handleSearchValue} />
          ) : searchOption === "member" ? (
            <MemberAutocomplete
              afdFilter={afdFilter}
              handleSearchValue={handleSearchValue}
            />
          ) : null}
        </Box>
      </Container>
      <Container
        id='memberCardContainer'
        maxWidth={false}
        sx={{
          display: "flex",
          flexWrap: "wrap",
          gap: "20px",
          width: "100vw",
          justifyContent: "center",
        }}>
        {searchOption === "community" && constituencyMainDisplay
          ? constituencyMainDisplay.map((member) => (
              <MemberCard
                handleMemberSelection={handleMemberSelection}
                key={member.id}>
                {member}
              </MemberCard>
            ))
          : null}
        {searchOption === "member" && memberDisplay
          ? memberDisplay.map((member) => (
              <MemberCard
                handleMemberSelection={handleMemberSelection}
                key={member.id}>
                {member}
              </MemberCard>
            ))
          : null}
        {constituencyAdditionalDisplay.length > 0 ? (
          <Typography
            variant='h5'
            component='div'
            sx={{ width: "100vw", textAlign: "center" }}>
            Vielleicht interessieren sich auch diese Abgeordneten f√ºr deine
            Nachricht:
          </Typography>
        ) : null}
        {searchOption === "community" && constituencyAdditionalDisplay
          ? constituencyAdditionalDisplay.map((member) => (
              <MemberCard
                handleMemberSelection={handleMemberSelection}
                additional
                key={member.id}>
                {member}
              </MemberCard>
            ))
          : null}
      </Container>
      <Container
        id='letterContainer'
        sx={{ maxWidth: "100%" }}
        maxWidth={false}>
        <Letter mailAdresses={mailAdresses} />
      </Container>
    </>
  );
}
