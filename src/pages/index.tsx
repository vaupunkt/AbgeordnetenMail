import {
  Box,
  Container,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
  SelectChangeEvent,
  Typography,
} from "@mui/material";
import Head from "next/head";
import * as React from "react";
import { useState } from "react";
import ConstituencyAutocomplete, {
  constituencyOption,
} from "@/components/ConstituencyAutocomplete";
import MemberAutocomplete, {
  memberList,
} from "@/components/MemberAutocomplete";
import members from "../data/btw21_members.json" assert { type: "json" };
import constituencies from "../data/btw21_constituencies.json" assert { type: "json" };
import MemberCard from "@/components/MemberCard";

export default function Home() {
  const [searchOption, setSearchOption] = useState<string>("");
  const [searchConstituency, setSearchConstituency] = useState<string>("");
  const [searchMember, setSearchMember] = useState<
    {
      id: number;
      name: string;
    }[]
  >([]);
  const handleSearchOption = (event: SelectChangeEvent) => {
    setSearchConstituency("");
    setSearchMember([]);
    setSearchOption(event.target.value as string);
    console.log(event.target.value);
  };

  const handleSearchValue = (value: any) => {
    console.log("Value:", value);
    if (searchOption === "member") {
      setSearchMember(value);
      console.log("member:", value);
    } else {
      setSearchConstituency(value);
      console.log("constituency:", value);
    }
  };

  const constituencyOptions: constituencyOption[] = constituencies.map(
    (constituency, index) => ({
      id: index,
      constituency_country_id: Number(constituency["Land"]),
      constituency_id: Number(constituency["Wahlkreis"]),
      constituency_name: constituency["Gemeinde Name"],
    })
  );

  const memberList: memberList[] = members.map((member, index) => ({
    id: index,
    name: member["Vornamen"] + " " + member["Nachname"],
    constituency: {
      constituency_type: member["Gebietsart"],
      constituency_id: Number(member["Gebietsnummer"]),
      constituency_name: member["Gebietsname"],
    },
    party: member["Gruppenname"],
    party_long: member["GruppennameLang"],
    emoji:
      member["Gruppenname"] === ("CSU" || "CDU")
        ? "‚ö´Ô∏è"
        : member["Gruppenname"] === "SPD"
        ? "üî¥"
        : member["Gruppenname"] === "DIE LINKE"
        ? "üü£"
        : member["Gruppenname"] === "GR√úNE"
        ? "üü¢"
        : member["Gruppenname"] === "FDP"
        ? "üü°"
        : member["Gruppenname"] === "AfD"
        ? "üîµ"
        : "‚ö™Ô∏è",
  }));
  const memberDisplay: memberList[] | null =
    searchMember.length > 0
      ? searchMember.flatMap((member) =>
          memberList.filter((memberItem) => memberItem.id === member.id)
        )
      : null;

  const constituencyMainDisplay: memberList[] | null = memberList.filter(
    (member) =>
      member.constituency.constituency_id +
        " - " +
        member.constituency.constituency_name ===
      searchConstituency
  );

  const constituencyAdditionalDisplay: memberList[] | null = memberList.filter(
    (member) =>
      member.constituency.constituency_type === "Land" &&
      member.constituency.constituency_id ===
        constituencyOptions.find(
          (constituency) =>
            constituency.constituency_id +
              " - " +
              constituency.constituency_name ===
            searchConstituency
        )?.constituency_country_id
  );

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main>
        <Container
          sx={{
            width: "100vw",
            display: "flex",
            flexDirection: "column",
            gap: "10px",
            marginTop: "50px",
            marginBottom: "50px",
          }}>
          <FormControl
            sx={{ width: "500px", textAlign: "center", margin: "auto" }}>
            <InputLabel id='selectSearchOption'>
              Suche deine*n Abgeordnete*n
            </InputLabel>
            <Select
              labelId='selectSearchOption'
              id='selectSearchOption'
              value={searchOption}
              onChange={(event) => handleSearchOption(event)}>
              <MenuItem value={"member"}>Namen</MenuItem>
              <MenuItem value={"community"}>Gemeinde / Wahlkreis</MenuItem>
            </Select>
          </FormControl>
          <Box sx={{ margin: "auto" }}>
            {searchOption === "community" ? (
              <ConstituencyAutocomplete handleSearchValue={handleSearchValue} />
            ) : searchOption === "member" ? (
              <MemberAutocomplete handleSearchValue={handleSearchValue} />
            ) : null}
          </Box>
        </Container>
        <Container
          sx={{
            display: "flex",
            flexWrap: "wrap",
            gap: "20px",
            width: "100vw",
            justifyContent: "center",
          }}>
          {searchOption === "community" && constituencyMainDisplay
            ? constituencyMainDisplay.map((member) => (
                <MemberCard key={member.id}>{member}</MemberCard>
              ))
            : null}
          {searchOption === "member" && memberDisplay
            ? memberDisplay.map((member) => (
                <MemberCard key={member.id}>{member}</MemberCard>
              ))
            : null}
          {constituencyAdditionalDisplay.length > 0 ? (
            <Typography
              variant='h5'
              component='div'
              sx={{ width: "100vw", textAlign: "center" }}>
              Vielleicht interessieren sich auch diese Abgeordneten f√ºr deine
              Nachricht:
            </Typography>
          ) : null}
          {searchOption === "community" && constituencyAdditionalDisplay
            ? constituencyAdditionalDisplay.map((member) => (
                <MemberCard key={member.id}>{member}</MemberCard>
              ))
            : null}
        </Container>
      </main>
    </>
  );
}
